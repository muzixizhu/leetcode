import collections
class Solution():
    def coinsbuild(self, coins, amounts):
        memo = {}
        memo[0] = 0

        def dp(n):
            if n in memo: return memo[n]
            if n == 0: return 0
            if n<0: return -1
            res = float('inf')
            for coin in coins:
                subproblem = dp(n-coin)
                if subproblem == -1:
                    continue
                res = min(res, 1 + subproblem)
            memo[n] = res if res != float('-inf') else -1
            return memo[n]
        return dp(amounts)
        # dp = [amounts + 1] * (amounts + 1)
        # print(dp)
        # dp[0] = 0
        # for i in range(0, amounts+1):
        #     for coin in coins:
        #         if i - coin < 0: continue
        #         else: dp[i] = min(dp[i], 1+dp[i-coin])
        # print(dp)
        # return dp[amounts]

if __name__=='__main__':
    coins = [1, 2, 5]
    amounts = 23
    solver = Solution()
    print(solver.coinsbuild(coins, amounts))